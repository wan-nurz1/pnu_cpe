{"entries":[{"timestamp":1747795751942,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":70,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"PNU_CPE_v1.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":218,"start2":218,"length1":114,"length2":44}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"PNU_CPE_v1.ts","value":"/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n/**\n * Motor directions\n */\nenum cpeMotor {\n    //% block=\"Forward\"\n    Forward,\n    //% block=\"Backward\"\n    Backward\n}\n\n/**\n * Turn directions\n */\nenum cpeTurn {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right\n}\n\n/**\n * Spin directions\n */\nenum cpeSpin {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right\n}\n\n/**\n * Servo channels\n */\nenum cpeServo {\n    //% block=\"SV1 (P13)\"\n    SV1,\n    //% block=\"SV2 (P14)\"\n    SV2,\n    //% block=\"SV3 (P15)\"\n    SV3,\n    //% block=\"SV4 (P16)\"\n    SV4\n}\n\n\n/**\n * ADC channels\n */\nenum cpeReadADC {\n    //% block=\"ADC0\"\n    ADC0 = 0,\n    //% block=\"ADC1\"\n    ADC1 = 1,\n    //% block=\"ADC2\"\n    ADC2 = 2,\n    //% block=\"ADC3\"\n    ADC3 = 3,\n    //% block=\"ADC4\"\n    ADC4 = 4,\n    //% block=\"ADC5\"\n    ADC5 = 5,\n    //% block=\"ADC6\"\n    ADC6 = 6,\n    //% block=\"ADC7\"\n    ADC7 = 7\n}\n\n/**\n * Motor channel\n */\nenum cpeMotorCH {\n    //% block=\"M1\"\n    M1,\n    //% block=\"M2\"\n    M2\n}\n/**\n * Digital pins for P0-P12\n */\nenum cpeDigitalPin {\n    //% block=\"P0\"\n    P0 = DigitalPin.P0,\n    //% block=\"P1\"\n    P1 = DigitalPin.P1,\n    //% block=\"P2\"\n    P2 = DigitalPin.P2,\n    //% block=\"P3\"\n    P3 = DigitalPin.P3,\n    //% block=\"P4\"\n    P4 = DigitalPin.P4,\n    //% block=\"P5\"\n    P5 = DigitalPin.P5,\n    //% block=\"P6\"\n    P6 = DigitalPin.P6,\n    //% block=\"P7\"\n    P7 = DigitalPin.P7,\n    //% block=\"P8\"\n    P8 = DigitalPin.P8,\n    //% block=\"P9\"\n    P9 = DigitalPin.P9,\n    //% block=\"P10\"\n    P10 = DigitalPin.P10,\n    //% block=\"P11\"\n    P11 = DigitalPin.P11,\n    //% block=\"P12\"\n    P12 = DigitalPin.P12\n}\n/**\n * Analog pins P0 - P12\n */\nenum cpeAnalogPin {\n    //% block=\"P0\"\n    P0,\n    //% block=\"P1\"\n    P1,\n    //% block=\"P2\"\n    P2,\n    //% block=\"P3\"\n    P3,\n    //% block=\"P4\"\n    P4,\n    //% block=\"P5\"\n    P5,\n    //% block=\"P6\"\n    P6,\n    //% block=\"P7\"\n    P7,\n    //% block=\"P8\"\n    P8,\n    //% block=\"P9\"\n    P9,\n    //% block=\"P10\"\n    P10,\n    //% block=\"P11\"\n    P11,\n    //% block=\"P12\"\n    P12\n}\n\n/**\n * Analog write P0 - P12\n */\n//% blockNamespace=\"Analog Write\"\n//% weight=60\nenum cpeAnalogWrite {\n    //% block=\"P0\"\n    P0,\n    //% block=\"P1\"\n    P1,\n    //% block=\"P2\"\n    P2,\n    //% block=\"P3\"\n    P3,\n    //% block=\"P4\"\n    P4,\n    //% block=\"P5\"\n    P5,\n    //% block=\"P6\"\n    P6,\n    //% block=\"P7\"\n    P7,\n    //% block=\"P8\"\n    P8,\n    //% block=\"P9\"\n    P9,\n    //% block=\"P10\"\n    P10,\n    //% block=\"P11\"\n    P11,\n    //% block=\"P12\"\n    P12\n}\n\n/**\n* Custom motor control blocks for CPE_PNU\n*/\n//% block=\"CPE PNU\" weight=100 color=#FFA500 icon=\"\\uf085\"\nnamespace cpe_pnu {\n\n    /**\n     * Control individual motor channel and direction.\n     * @param Channel Motor channel\n     * @param Direction Motor direction\n     * @param Speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_setMotor\" block=\"setMotor %cpeMotorCH|Direction %cpeMotor|Speed %Speed\"\n    //% Speed.min=0 Speed.max=100\n    //% weight=100\n    //% group=\"Motor\"\n    export function setMotor(Channel: cpeMotorCH, Direction: cpeMotor, Speed: number): void {\n        let motorspeed = pins.map(Speed, 0, 100, 0, 1023)\n\n        if (Channel == cpeMotorCH.M1 && Direction == cpeMotor.Forward) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M2 && Direction == cpeMotor.Forward) {\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M1 && Direction == cpeMotor.Backward) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M2 && Direction == cpeMotor.Backward) {\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n    }\n\n    /**\n     * Turn the robot by running one motor.\n     * @param Turn Direction to turn, eg: cpeTurn.Left\n     * @param speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_turn\" block=\"Turn %cpeTurn|Speed %speed\"\n    //% speed.min=0 speed.max=100\n    //% group=\"Motor\"\n    export function Turn(Turn: cpeTurn, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Turn == cpeTurn.Left) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, 0)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Turn == cpeTurn.Right) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, 0)\n        }\n    }\n\n    /**\n     * Spin the robot in place (left or right).\n     * @param Spin Direction to spin, eg: cpeSpin.Left\n     * @param speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_spin\" block=\"Spin %cpeSpin|Speed %speed\"\n    //% speed.min=0 speed.max=100\n    //% group=\"Motor\"\n    export function Spin(Spin: cpeSpin, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Spin == cpeSpin.Left) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Spin == cpeSpin.Right) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n    }\n\n    /**\n     * Stop both motors.\n     */\n    //% blockId=\"cpe_motorStop\" block=\"Motor Stop\"\n    //% group=\"Motor\"\n    export function MotorStop(): void {\n        pins.digitalWritePin(DigitalPin.P13, 1)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.digitalWritePin(DigitalPin.P15, 1)\n        pins.analogWritePin(AnalogPin.P16, 0)\n    }\n\n\n    /**\n * Control Servo 1–4 set degree between 0–180\n * @param Degree servo degree 0–180, eg: 90\n */\n    //% blockId=\"cpe_Servo\" block=\"Servo %cpeServo|Degree %Degree\"\n    //% Degree.min=0 Degree.max=180\n    //% weight=75\n    //% group=\"Servo Motor\"\n    export function Servo(Servo: cpeServo, Degree: number): void {\n        switch (Servo) {\n            case cpeServo.SV1:\n                pins.servoWritePin(AnalogPin.P13, Degree)\n                break\n            case cpeServo.SV2:\n                pins.servoWritePin(AnalogPin.P14, Degree)\n                break\n            case cpeServo.SV3:\n                pins.servoWritePin(AnalogPin.P15, Degree)\n                break\n            case cpeServo.SV4:\n                pins.servoWritePin(AnalogPin.P16, Degree)\n                break\n        }\n    }\n\n    /**\n     * Set Servo to free rotation\n     * @param Servo Servo to stop\n     */\n    //% blockId=\"cpe_ServoStop\" block=\"Servo Stop %cpeServo\"\n    //% weight=70\n    //% group=\"Servo Motor\"\n    export function ServoStop(Servo: cpeServo): void {\n        switch (Servo) {\n            case cpeServo.SV1:\n                pins.servoSetPulse(AnalogPin.P13, 0)\n                break\n            case cpeServo.SV2:\n                pins.servoSetPulse(AnalogPin.P14, 0)\n                break\n            case cpeServo.SV3:\n                pins.servoSetPulse(AnalogPin.P15, 0)\n                break\n            case cpeServo.SV4:\n                pins.servoSetPulse(AnalogPin.P16, 0)\n                break\n        }\n    }\n\n    /**\n     * Read ADC channel 0-7\n     * @param ReadADC ADC channel to read\n     */\n    //% blockId=\"cpe_readADC\" block=\"Read %cpeReadADC\"\n    //% weight=60\n    //% group=\"Read ADC\"\n    export function ReadADC(ReadADC: cpeReadADC): number {\n        pins.i2cWriteNumber(72, ReadADC, NumberFormat.UInt8LE, false)\n        return pins.i2cReadNumber(72, NumberFormat.UInt16BE, false)\n    }\n    /**\n     * Write digital value to pin\n     */\n    //% blockId=\"cpe_writeDigital\" block=\"Digital Write pin %pin|value %value\"\n    //% value.min=0 value.max=1\n    //% weight=55\n    //% group=\"Digital Input/Output\"\n    export function cpe_writeDigital(pin: cpeDigitalPin, value: number): void {\n        pins.digitalWritePin(pin, value)\n    }\n\n    /**\n     * Read digital value from pin\n     */\n    //% blockId=\"cpe_readDigital\" block=\"Digital Read pin %pin\"\n    //% weight=50\n    //% group=\"Digital Input/Output\"\n    export function cpe_readDigital(pin: cpeDigitalPin): number {\n        return pins.digitalReadPin(pin)\n    }\n    /**\n * Read analog value from pin P0 - P12\n * @param pin Analog pin to read\n */\n    //% blockId=\"cpe_readAnalog\" block=\"Read analog pin %pin\"\n    //% weight=50\n    //% group=\"Analog Input/Output\"\n    export function readAnalog(pin: cpeAnalogPin): number {\n        switch (pin) {\n            case cpeAnalogPin.P0: return pins.analogReadPin(AnalogPin.P0);\n            case cpeAnalogPin.P1: return pins.analogReadPin(AnalogPin.P1);\n            case cpeAnalogPin.P2: return pins.analogReadPin(AnalogPin.P2);\n            case cpeAnalogPin.P3: return pins.analogReadPin(AnalogPin.P3);\n            case cpeAnalogPin.P4: return pins.analogReadPin(AnalogPin.P4);\n            case cpeAnalogPin.P5: return pins.analogReadPin(AnalogPin.P5);\n            case cpeAnalogPin.P6: return pins.analogReadPin(AnalogPin.P6);\n            case cpeAnalogPin.P7: return pins.analogReadPin(AnalogPin.P7);\n            case cpeAnalogPin.P8: return pins.analogReadPin(AnalogPin.P8);\n            case cpeAnalogPin.P9: return pins.analogReadPin(AnalogPin.P9);\n            case cpeAnalogPin.P10: return pins.analogReadPin(AnalogPin.P10);\n            case cpeAnalogPin.P11: return pins.analogReadPin(AnalogPin.P11);\n            case cpeAnalogPin.P12: return pins.analogReadPin(AnalogPin.P12);\n            default: return 0;\n        }\n    }\n    /**\n     * Write analog value (PWM) to pin P0 - P12\n     * @param pin Analog pin to write to\n     * @param value PWM value (0 - 1023)\n     */\n    //% blockId=\"cpe_analogWrite\" block=\"Analog write %value|to pin %pin\"\n    //% weight=49\n    //% group=\"Analog Input/Output\"\n    export function analogWrite(pin: cpeAnalogPin, value: number): void {\n        value = Math.clamp(0, 1023, value);\n        switch (pin) {\n            case cpeAnalogPin.P0: pins.analogWritePin(AnalogPin.P0, value); break;\n            case cpeAnalogPin.P1: pins.analogWritePin(AnalogPin.P1, value); break;\n            case cpeAnalogPin.P2: pins.analogWritePin(AnalogPin.P2, value); break;\n            case cpeAnalogPin.P3: pins.analogWritePin(AnalogPin.P3, value); break;\n            case cpeAnalogPin.P4: pins.analogWritePin(AnalogPin.P4, value); break;\n            case cpeAnalogPin.P5: pins.analogWritePin(AnalogPin.P5, value); break;\n            case cpeAnalogPin.P6: pins.analogWritePin(AnalogPin.P6, value); break;\n            case cpeAnalogPin.P7: pins.analogWritePin(AnalogPin.P7, value); break;\n            case cpeAnalogPin.P8: pins.analogWritePin(AnalogPin.P8, value); break;\n            case cpeAnalogPin.P9: pins.analogWritePin(AnalogPin.P9, value); break;\n            case cpeAnalogPin.P10: pins.analogWritePin(AnalogPin.P10, value); break;\n            case cpeAnalogPin.P11: pins.analogWritePin(AnalogPin.P11, value); break;\n            case cpeAnalogPin.P12: pins.analogWritePin(AnalogPin.P12, value); break;\n        }\n    }\n\n}\n\n\n\n"}]}],"snapshots":[{"timestamp":1747795751941,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"PNU_CPE\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1747795922803}